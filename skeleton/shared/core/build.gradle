import org.apache.tools.ant.filters.ReplaceTokens

// ############################################################################
// Required Plugins
// ############################################################################
apply plugin: "java"
apply plugin: com.googlecode.flyway.gradle.FlywayPlugin // DB

// ############################################################################
// Dependencies
// ############################################################################
dependencies {
	// Hibernate & JPA 2
	compile		group: 'javax',						name: 'javaee-api', 			version: '7.0'
}

// ############################################################################
// Scaffolding of project
// ############################################################################
apply from: 'scaffold.gradle'

// ############################################################################
// Query DSL Generation
// ############################################################################
apply from: "$rootDir/gradle/querydsl.gradle"

// ############################################################################
// Eclipse Project Nature for generated sources
// ############################################################################
import org.gradle.plugins.ide.eclipse.model.SourceFolder
eclipse {

	classpath {
		defaultOutputDir = file("${project.projectDir}/bin/main")
		
		file {
			beforeMerged { classpath -> 
				classpath.entries.clear()
			}

			whenMerged { cp ->
				cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "bin/main"
		  		cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "bin/test"
			}
		}
	}

	project {
		natures 'org.eclipse.xtext.ui.shared.xtextNature'
		natures 'org.sonar.ide.eclipse.core.sonarNature'
		buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
	}


}
