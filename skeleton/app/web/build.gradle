import org.apache.tools.ant.filters.ReplaceTokens

// ############################################################################
// Plugins
// ############################################################################
apply plugin: "java"
apply plugin: "war"
apply plugin: "gwt"
apply plugin: "com.terrafolio.jenkins" // CI

// ############################################################################
// Source Sets
// ############################################################################
apply from: "$rootDir/gradle/java/sourcesets.gradle"

// ############################################################################
// Dependencies
// ############################################################################
dependencies {
	// project dependencies
	compile project(':shared:core')

	// FIXME tell gwt that there are source files in the generated source sets too.
	compile files(sourceSets.generated.java.srcDirs) 

	// dozer
	compile 			group: 'net.sf.dozer', 					name: 'dozer',					version: '5.5.+'

	// GWT Bootstrap for layouting
	providedCompile 	group: 'org.gwtbootstrap3',				name: 'gwtbootstrap3', 			version: '0.7'
	providedCompile 	group: 'org.gwtbootstrap3',				name: 'gwtbootstrap3-extras',	version: '0.7'
	
	// GWTP
	providedCompile		group: 'com.gwtplatform', 				name: 'gwtp-all', 				version: '1.2.+'
	providedCompile		group: 'com.googlecode.gwt-crypto', 	name: 'gwt-crypto', 			version: '2.3.0'
}

// ############################################################################
// Project Scaffolding
// ############################################################################
apply from: "scaffold.gradle"

// ############################################################################
// Project Initialization
// ############################################################################

initProject << {

	sourceSets*.java.srcDirs*.each {
		new File(it.toString() + "/" + rootProject.group.replaceAll("\\.", "/") + "/" + rootProject.name + "/" + project.name).mkdirs()
	}
	sourceSets*.resources.srcDirs*.each {
		new File(it.toString() + "/" + rootProject.group.replaceAll("\\.", "/") + "/" + rootProject.name + "/" + project.name).mkdirs()
	}

	webAppDir.mkdirs()
	new File(webAppDir.toString() + "/WEB-INF").mkdirs()
	new File(webAppDir.toString() + "/META-INF").mkdirs()
}

// ############################################################################
// Eclipse Project Nature for generated sources
// ############################################################################
eclipse {
	project {
		natures 'org.eclipse.xtext.ui.shared.xtextNature'
		natures 'com.google.gwt.eclipse.core.gwtNature'
		natures 'org.sonar.ide.eclipse.core.sonarNature'
		buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
		buildCommand 'com.google.gdt.eclipse.core.webAppProjectValidator'
		buildCommand 'com.google.gwt.eclipse.core.gwtProjectValidator'
	}

	classpath {
		containers.clear();
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER','com.google.gwt.eclipse.core.GWT_CONTAINER','org.eclipse.jst.j2ee.internal.web.container'

		defaultOutputDir = file('war/WEB-INF/classes')
	}

	wtp {
		component {
			//Damit keine Client Klassen auf den App Server deployed werden
			property name: 'component.exclusion.patterns', value: 'WEB-INF/classes/**/client/**'
			property name: 'component.exclusion.patterns', value: 'WEB-INF/classes/org/fusesource/**'
			//Damit die kompilierte GWT Anwendung bei der Entwicklung deployed wird
			resource sourcePath: "/war/$rootProject.name", deployPath: "$rootProject.name"
			resource sourcePath: '/src/main/webapp', deployPath: '/'
		}
	}
}